/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.infinispan.query.remote.client.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Request\",\"namespace\":\"org.infinispan.query.remote.client.avro\",\"fields\":[{\"name\":\"jpqlString\",\"type\":\"string\"},{\"name\":\"startOffset\",\"type\":\"long\"},{\"name\":\"maxResult\",\"type\":\"int\"},{\"name\":\"local\",\"type\":\"boolean\",\"default\":\"false\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence jpqlString;
  @Deprecated public long startOffset;
  @Deprecated public int maxResult;
  @Deprecated public boolean local;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Request() {}

  /**
   * All-args constructor.
   */
  public Request(java.lang.CharSequence jpqlString, java.lang.Long startOffset, java.lang.Integer maxResult, java.lang.Boolean local) {
    this.jpqlString = jpqlString;
    this.startOffset = startOffset;
    this.maxResult = maxResult;
    this.local = local;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return jpqlString;
    case 1: return startOffset;
    case 2: return maxResult;
    case 3: return local;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: jpqlString = (java.lang.CharSequence)value$; break;
    case 1: startOffset = (java.lang.Long)value$; break;
    case 2: maxResult = (java.lang.Integer)value$; break;
    case 3: local = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'jpqlString' field.
   */
  public java.lang.CharSequence getJpqlString() {
    return jpqlString;
  }

  /**
   * Sets the value of the 'jpqlString' field.
   * @param value the value to set.
   */
  public void setJpqlString(java.lang.CharSequence value) {
    this.jpqlString = value;
  }

  /**
   * Gets the value of the 'startOffset' field.
   */
  public java.lang.Long getStartOffset() {
    return startOffset;
  }

  /**
   * Sets the value of the 'startOffset' field.
   * @param value the value to set.
   */
  public void setStartOffset(java.lang.Long value) {
    this.startOffset = value;
  }

  /**
   * Gets the value of the 'maxResult' field.
   */
  public java.lang.Integer getMaxResult() {
    return maxResult;
  }

  /**
   * Sets the value of the 'maxResult' field.
   * @param value the value to set.
   */
  public void setMaxResult(java.lang.Integer value) {
    this.maxResult = value;
  }

  /**
   * Gets the value of the 'local' field.
   */
  public java.lang.Boolean getLocal() {
    return local;
  }

  /**
   * Sets the value of the 'local' field.
   * @param value the value to set.
   */
  public void setLocal(java.lang.Boolean value) {
    this.local = value;
  }

  /** Creates a new Request RecordBuilder */
  public static org.infinispan.query.remote.client.avro.Request.Builder newBuilder() {
    return new org.infinispan.query.remote.client.avro.Request.Builder();
  }
  
  /** Creates a new Request RecordBuilder by copying an existing Builder */
  public static org.infinispan.query.remote.client.avro.Request.Builder newBuilder(org.infinispan.query.remote.client.avro.Request.Builder other) {
    return new org.infinispan.query.remote.client.avro.Request.Builder(other);
  }
  
  /** Creates a new Request RecordBuilder by copying an existing Request instance */
  public static org.infinispan.query.remote.client.avro.Request.Builder newBuilder(org.infinispan.query.remote.client.avro.Request other) {
    return new org.infinispan.query.remote.client.avro.Request.Builder(other);
  }
  
  /**
   * RecordBuilder for Request instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Request>
    implements org.apache.avro.data.RecordBuilder<Request> {

    private java.lang.CharSequence jpqlString;
    private long startOffset;
    private int maxResult;
    private boolean local;

    /** Creates a new Builder */
    private Builder() {
      super(org.infinispan.query.remote.client.avro.Request.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.infinispan.query.remote.client.avro.Request.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.jpqlString)) {
        this.jpqlString = data().deepCopy(fields()[0].schema(), other.jpqlString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startOffset)) {
        this.startOffset = data().deepCopy(fields()[1].schema(), other.startOffset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxResult)) {
        this.maxResult = data().deepCopy(fields()[2].schema(), other.maxResult);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.local)) {
        this.local = data().deepCopy(fields()[3].schema(), other.local);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Request instance */
    private Builder(org.infinispan.query.remote.client.avro.Request other) {
            super(org.infinispan.query.remote.client.avro.Request.SCHEMA$);
      if (isValidValue(fields()[0], other.jpqlString)) {
        this.jpqlString = data().deepCopy(fields()[0].schema(), other.jpqlString);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startOffset)) {
        this.startOffset = data().deepCopy(fields()[1].schema(), other.startOffset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maxResult)) {
        this.maxResult = data().deepCopy(fields()[2].schema(), other.maxResult);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.local)) {
        this.local = data().deepCopy(fields()[3].schema(), other.local);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'jpqlString' field */
    public java.lang.CharSequence getJpqlString() {
      return jpqlString;
    }
    
    /** Sets the value of the 'jpqlString' field */
    public org.infinispan.query.remote.client.avro.Request.Builder setJpqlString(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.jpqlString = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'jpqlString' field has been set */
    public boolean hasJpqlString() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'jpqlString' field */
    public org.infinispan.query.remote.client.avro.Request.Builder clearJpqlString() {
      jpqlString = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'startOffset' field */
    public java.lang.Long getStartOffset() {
      return startOffset;
    }
    
    /** Sets the value of the 'startOffset' field */
    public org.infinispan.query.remote.client.avro.Request.Builder setStartOffset(long value) {
      validate(fields()[1], value);
      this.startOffset = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'startOffset' field has been set */
    public boolean hasStartOffset() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'startOffset' field */
    public org.infinispan.query.remote.client.avro.Request.Builder clearStartOffset() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'maxResult' field */
    public java.lang.Integer getMaxResult() {
      return maxResult;
    }
    
    /** Sets the value of the 'maxResult' field */
    public org.infinispan.query.remote.client.avro.Request.Builder setMaxResult(int value) {
      validate(fields()[2], value);
      this.maxResult = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'maxResult' field has been set */
    public boolean hasMaxResult() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'maxResult' field */
    public org.infinispan.query.remote.client.avro.Request.Builder clearMaxResult() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'local' field */
    public java.lang.Boolean getLocal() {
      return local;
    }
    
    /** Sets the value of the 'local' field */
    public org.infinispan.query.remote.client.avro.Request.Builder setLocal(boolean value) {
      validate(fields()[3], value);
      this.local = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'local' field has been set */
    public boolean hasLocal() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'local' field */
    public org.infinispan.query.remote.client.avro.Request.Builder clearLocal() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Request build() {
      try {
        Request record = new Request();
        record.jpqlString = fieldSetFlags()[0] ? this.jpqlString : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.startOffset = fieldSetFlags()[1] ? this.startOffset : (java.lang.Long) defaultValue(fields()[1]);
        record.maxResult = fieldSetFlags()[2] ? this.maxResult : (java.lang.Integer) defaultValue(fields()[2]);
        record.local = fieldSetFlags()[3] ? this.local : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
