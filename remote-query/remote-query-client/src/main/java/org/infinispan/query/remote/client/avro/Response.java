/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.infinispan.query.remote.client.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Response extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Response\",\"namespace\":\"org.infinispan.query.remote.client.avro\",\"fields\":[{\"name\":\"numResults\",\"type\":\"int\"},{\"name\":\"results\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int numResults;
  @Deprecated public java.util.List<java.nio.ByteBuffer> results;

  /**
   * Default constructor.
   */
  public Response() {}

  /**
   * All-args constructor.
   */
  public Response(java.lang.Integer numResults, java.util.List<java.nio.ByteBuffer> results) {
    this.numResults = numResults;
    this.results = results;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return numResults;
    case 1: return results;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: numResults = (java.lang.Integer)value$; break;
    case 1: results = (java.util.List<java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'numResults' field.
   */
  public java.lang.Integer getNumResults() {
    return numResults;
  }

  /**
   * Sets the value of the 'numResults' field.
   * @param value the value to set.
   */
  public void setNumResults(java.lang.Integer value) {
    this.numResults = value;
  }

  /**
   * Gets the value of the 'results' field.
   */
  public java.util.List<java.nio.ByteBuffer> getResults() {
    return results;
  }

  /**
   * Sets the value of the 'results' field.
   * @param value the value to set.
   */
  public void setResults(java.util.List<java.nio.ByteBuffer> value) {
    this.results = value;
  }

  /** Creates a new Response RecordBuilder */
  public static org.infinispan.query.remote.client.avro.Response.Builder newBuilder() {
    return new org.infinispan.query.remote.client.avro.Response.Builder();
  }
  
  /** Creates a new Response RecordBuilder by copying an existing Builder */
  public static org.infinispan.query.remote.client.avro.Response.Builder newBuilder(org.infinispan.query.remote.client.avro.Response.Builder other) {
    return new org.infinispan.query.remote.client.avro.Response.Builder(other);
  }
  
  /** Creates a new Response RecordBuilder by copying an existing Response instance */
  public static org.infinispan.query.remote.client.avro.Response.Builder newBuilder(org.infinispan.query.remote.client.avro.Response other) {
    return new org.infinispan.query.remote.client.avro.Response.Builder(other);
  }
  
  /**
   * RecordBuilder for Response instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Response>
    implements org.apache.avro.data.RecordBuilder<Response> {

    private int numResults;
    private java.util.List<java.nio.ByteBuffer> results;

    /** Creates a new Builder */
    private Builder() {
      super(org.infinispan.query.remote.client.avro.Response.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.infinispan.query.remote.client.avro.Response.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Response instance */
    private Builder(org.infinispan.query.remote.client.avro.Response other) {
            super(org.infinispan.query.remote.client.avro.Response.SCHEMA$);
      if (isValidValue(fields()[0], other.numResults)) {
        this.numResults = data().deepCopy(fields()[0].schema(), other.numResults);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.results)) {
        this.results = data().deepCopy(fields()[1].schema(), other.results);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'numResults' field */
    public java.lang.Integer getNumResults() {
      return numResults;
    }
    
    /** Sets the value of the 'numResults' field */
    public org.infinispan.query.remote.client.avro.Response.Builder setNumResults(int value) {
      validate(fields()[0], value);
      this.numResults = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'numResults' field has been set */
    public boolean hasNumResults() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'numResults' field */
    public org.infinispan.query.remote.client.avro.Response.Builder clearNumResults() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'results' field */
    public java.util.List<java.nio.ByteBuffer> getResults() {
      return results;
    }
    
    /** Sets the value of the 'results' field */
    public org.infinispan.query.remote.client.avro.Response.Builder setResults(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[1], value);
      this.results = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'results' field has been set */
    public boolean hasResults() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'results' field */
    public org.infinispan.query.remote.client.avro.Response.Builder clearResults() {
      results = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Response build() {
      try {
        Response record = new Response();
        record.numResults = fieldSetFlags()[0] ? this.numResults : (java.lang.Integer) defaultValue(fields()[0]);
        record.results = fieldSetFlags()[1] ? this.results : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
