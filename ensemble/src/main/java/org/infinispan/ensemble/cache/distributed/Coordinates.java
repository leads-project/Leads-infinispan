/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.infinispan.ensemble.cache.distributed;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Coordinates extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Coordinates\",\"namespace\":\"org.infinispan.ensemble.cache.distributed\",\"fields\":[{\"name\":\"key\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cache\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"longitude\",\"type\":\"double\",\"default\":0},{\"name\":\"latitude\",\"type\":\"double\",\"default\":0}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence key;
  @Deprecated public java.lang.CharSequence cache;
  @Deprecated public double longitude;
  @Deprecated public double latitude;

  /**
   * Default constructor.
   */
  public Coordinates() {}

  /**
   * All-args constructor.
   */
  public Coordinates(java.lang.CharSequence key, java.lang.CharSequence cache, java.lang.Double longitude, java.lang.Double latitude) {
    this.key = key;
    this.cache = cache;
    this.longitude = longitude;
    this.latitude = latitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return cache;
    case 2: return longitude;
    case 3: return latitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.CharSequence)value$; break;
    case 1: cache = (java.lang.CharSequence)value$; break;
    case 2: longitude = (java.lang.Double)value$; break;
    case 3: latitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'cache' field.
   */
  public java.lang.CharSequence getCache() {
    return cache;
  }

  /**
   * Sets the value of the 'cache' field.
   * @param value the value to set.
   */
  public void setCache(java.lang.CharSequence value) {
    this.cache = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /** Creates a new Coordinates RecordBuilder */
  public static org.infinispan.ensemble.cache.distributed.Coordinates.Builder newBuilder() {
    return new org.infinispan.ensemble.cache.distributed.Coordinates.Builder();
  }
  
  /** Creates a new Coordinates RecordBuilder by copying an existing Builder */
  public static org.infinispan.ensemble.cache.distributed.Coordinates.Builder newBuilder(org.infinispan.ensemble.cache.distributed.Coordinates.Builder other) {
    return new org.infinispan.ensemble.cache.distributed.Coordinates.Builder(other);
  }
  
  /** Creates a new Coordinates RecordBuilder by copying an existing Coordinates instance */
  public static org.infinispan.ensemble.cache.distributed.Coordinates.Builder newBuilder(org.infinispan.ensemble.cache.distributed.Coordinates other) {
    return new org.infinispan.ensemble.cache.distributed.Coordinates.Builder(other);
  }
  
  /**
   * RecordBuilder for Coordinates instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Coordinates>
    implements org.apache.avro.data.RecordBuilder<Coordinates> {

    private java.lang.CharSequence key;
    private java.lang.CharSequence cache;
    private double longitude;
    private double latitude;

    /** Creates a new Builder */
    private Builder() {
      super(org.infinispan.ensemble.cache.distributed.Coordinates.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.infinispan.ensemble.cache.distributed.Coordinates.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Coordinates instance */
    private Builder(org.infinispan.ensemble.cache.distributed.Coordinates other) {
            super(org.infinispan.ensemble.cache.distributed.Coordinates.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cache)) {
        this.cache = data().deepCopy(fields()[1].schema(), other.cache);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.latitude)) {
        this.latitude = data().deepCopy(fields()[3].schema(), other.latitude);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public java.lang.CharSequence getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'cache' field */
    public java.lang.CharSequence getCache() {
      return cache;
    }
    
    /** Sets the value of the 'cache' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder setCache(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.cache = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'cache' field has been set */
    public boolean hasCache() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'cache' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder clearCache() {
      cache = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'longitude' field */
    public java.lang.Double getLongitude() {
      return longitude;
    }
    
    /** Sets the value of the 'longitude' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'longitude' field has been set */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'longitude' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'latitude' field */
    public java.lang.Double getLatitude() {
      return latitude;
    }
    
    /** Sets the value of the 'latitude' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder setLatitude(double value) {
      validate(fields()[3], value);
      this.latitude = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'latitude' field has been set */
    public boolean hasLatitude() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'latitude' field */
    public org.infinispan.ensemble.cache.distributed.Coordinates.Builder clearLatitude() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Coordinates build() {
      try {
        Coordinates record = new Coordinates();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.cache = fieldSetFlags()[1] ? this.cache : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (java.lang.Double) defaultValue(fields()[2]);
        record.latitude = fieldSetFlags()[3] ? this.latitude : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
